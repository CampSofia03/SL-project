library(tidyverse)
library(ggplot2)
library(psych)
library(knitr)
library(factoextra) #install.packages("factoextra")
library(dplyr)

#Data Preparation 

file_path <- file.choose()
data <- read.csv(file_path)
data%>%head()
table(data$gender)
table(data$race.ethnicity)
table(data$parental.level.of.education)
table(data$lunch)

summary(data) # Visualizza i valori


#Data Cleaning 

sum(is.na(data))  # Conta il numero totale di NA nel dataset
colSums(is.na(data))  # Conta gli NA per ogni colonna
data[!complete.cases(data), ]  # Visualizza le righe con NA
sum(duplicated(data)) # Visualizza i valori duplicati
lapply(data[, sapply(data, is.character)], unique) #Verificare i valori unici nelle colonne categoriche

names(data)[names(data) == "gender"] <- "Gender"
names(data)[names(data) == "race.ethnicity"] <- "Race Ethnicity"
names(data)[names(data) == "parental.level.of.education"] <- "Parental Level of Education"
names(data)[names(data) == "test.preparation.course"] <- "Test Preparation Course"
names(data)[names(data) == "math.score"] <- "Math Score"
names(data)[names(data) == "lunch"] <- "Lunch"
names(data)[names(data) == "reading.score"] <- "Reading Score"
names(data)[names(data) == "writing.score"] <- "Writing Score"


#Data Distribution Overview

kable(head(data, 5)) #head(data, 5)


# Istogramma per Math Score
ggplot(data, aes(x = `Math Score`)) +
  geom_histogram(bins = 20, fill = "skyblue", color = "black") +
  ggtitle("Distribuzione dei Punteggi di Matematica") +
  xlab("Math Score") +
  ylab("Frequenza")

# Istogramma per Reading Score
ggplot(data, aes(x = `Reading Score`)) +
  geom_histogram(bins = 20, fill = "lightgreen", color = "black") +
  ggtitle("Distribuzione dei Punteggi di Lettura") +
  xlab("Reading Score") +
  ylab("Frequenza")

# Istogramma per Writing Score
ggplot(data, aes(x = `Writing Score`)) +
  geom_histogram(bins = 20, fill = "salmon", color = "black") +
  ggtitle("Distribuzione dei Punteggi di Scrittura") +
  xlab("Writing Score") +
  ylab("Frequenza")



#Outlier Elimination Strategy

numeric_cols <- c("Math Score", "Reading Score", "Writing Score") #colonne numeriche

for (col in numeric_cols) {
  Q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
  Q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
  IQR_value <- Q3 - Q1
  
  # Visualizza i limiti per il debug
  cat("\nColonna:", col, "\nQ1:", Q1, "\nQ3:", Q3, "\nIQR:", IQR_value, "\n")
  
  # Controlla il numero di righe prima e dopo il filtro
  cat("Righe prima:", nrow(data), "\n")
  
  data <- data[data[[col]] >= (Q1 - 1.5 * IQR_value) & 
                 data[[col]] <= (Q3 + 1.5 * IQR_value), ]
  
  cat("Righe dopo:", nrow(data), "\n")
}

summary(data)


#Clustering, Visualization, Comparison

data_scaled <- scale(data[, numeric_cols])

# Determinazione del numero ottimale di cluster con il metodo "Elbow"
set.seed(123)  # Per garantire la riproducibilità
fviz_nbclust(data_scaled, kmeans, method = "wss") +
  geom_vline(xintercept = 4, linetype = 2) +
  labs(subtitle = "Metodo del Gomito (Elbow Method)")

# Esecuzione del clustering K-means
k <- 5  # Numero di cluster scelto
set.seed(123)
km_result <- kmeans(data_scaled, centers = k, nstart = 25)
# Aggiunta del cluster ai dati originali
data$Cluster <- as.factor(km_result$cluster)
fviz_cluster(km_result, data = data_scaled, 
             geom = "point", ellipse.type = "norm",
             palette = "jco", ggtheme = theme_minimal())

head(data)

#Reading, Writing, Maths plot

girl_data<-data%>%filter(Gender=='female')
boy_data<-data%>%filter(Gender=='male')
ggplot()+
  geom_point(girl_data,mapping=aes(`Math Score`,`Reading Score`,color='female'))+
  geom_point(boy_data,mapping=aes(`Math Score`,`Reading Score`,color='male'))+labs(title='Math and Reading score')
ggplot()+
  geom_point(girl_data,mapping=aes(`Math Score`,`Writing Score`,color='female'))+
  geom_point(boy_data,mapping = aes(`Math Score`,`Writing Score`,color='male'))+labs(title='Math and Writing score')
ggplot()+
  geom_point(girl_data,mapping=aes(`Reading Score`,`Writing Score`,color='female'))+
  geom_point(boy_data,mapping = aes(`Reading Score`,`Writing Score`,color='male'))+labs(title='Reading and Writing Score')

pairs.panels(data[, 6:8],
             method = "pearson",  # Metodo di correlazione (Pearson di default)
             hist.col = "skyblue", # Colore degli istogrammi
             density = TRUE,       # Aggiunge curve di densità
             ellipses = TRUE,      # Aggiunge ellissi di correlazione
             lm = TRUE             # Aggiunge linee di regressione lineare
)


#Central Point

# Calcolo della media per Math Score e Reading Score
central_math_score <- mean(data$`Math Score`, na.rm = TRUE)
central_reading_score <- mean(data$`Reading Score`, na.rm = TRUE)
central_writing_score <- mean(data$`Writing Score`, na.rm = TRUE)

# Visualizzazione dei risultati
cat("Punto centrale (Math Score):", central_math_score, "\n")
cat("Punto centrale (Reading Score):", central_reading_score, "\n")
cat("Punto centrale (Writing Score):", central_writing_score, "\n")

#Categorical Column Mean

ndata %>%
  group_by(`gender`) %>%
  summarize(avg_score = round(mean(`math.score` + `reading.score` + `writing.score`) / 3, 1)) %>%
  ggplot(aes(x = `gender`, y = avg_score, fill = `gender`)) +
  geom_bar(stat = 'identity') +
  geom_text(aes(label = avg_score), vjust = -0.3, size = 4) +  # Etichette sopra le barre
  coord_flip() +  # Ruota il grafico orizzontalmente
  labs(title = 'Average Score of Each Gender', x = 'Race/Ethnicity', y = 'Average Score') +
  guides(fill = "none") +  # Rimuove la legenda
  theme_minimal()
ndata %>%
  group_by(`race.ethnicity`) %>%
  summarize(avg_score = round(mean(`math.score` + `reading.score` + `writing.score`) / 3, 1)) %>%
  ggplot(aes(x = `race.ethnicity`, y = avg_score, fill = `race.ethnicity`)) +
  geom_bar(stat = 'identity') +
  geom_text(aes(label = avg_score), vjust = -0.3, size = 4) +  # Etichette sopra le barre
  coord_flip() +  # Ruota il grafico orizzontalmente
  labs(title = 'Average Score of Each Race Ethnicity', x = 'Race/Ethnicity', y = 'Average Score') +
  guides(fill = "none") +  # Rimuove la legenda
  theme_minimal()

--> Parental level of Education |     Lunch     |   Test Preparation Course




#Central Point

central_math_score <- mean(data$`Math Score`, na.rm = TRUE)
central_reading_score <- mean(data$`Reading Score`, na.rm = TRUE)
central_writing_score <- mean(data$`Writing Score`, na.rm = TRUE)

# Funzione per calcolare la distanza euclidea dal punto centrale
euclidean_distance <- function(math, reading, writing) {
  sqrt((math - central_math_score)^2 +
         (reading - central_reading_score)^2 +
         (writing - central_writing_score)^2)
}
  
# Calcolo della distanza per ciascuna riga del dataset
data$DistanceFromCenter <- mapply(euclidean_distance,
                                  math = data$`Math Score`,
                                  reading = data$`Reading Score`,
                                  writing = data$`Writing Score`)

# Visualizzazione dei primi risultati
head(data)

---
Title: Clustering model
Author: Campregher Sofia
Source: https://www.kaggle.com/datasets/spscientist/students-performance-in-exams/data

---

install.packages("tidyverse")
library(tidyverse)
install.packages("ggplot2")
library(ggplot2)
install.packages("psych")
library(psych)
install.packages("knitr")
library(knitr)
installed.packages()["factoextra", ]
library(factoextra)
install.packages("dplyr")
library(dplyr)
install.packages("ggcorrplot")
library(ggcorrplot)
install.packages("reader")
library(reader)
install.packages("fossil")
library(fossil)


## 1 - Data Preparation 
  

file_path <- file.choose()
data <- read.csv(file_path)

# 1.a - Data cleaning

sum(is.na(data))
colSums(is.na(data))
data[!complete.cases(data), ]
sum(duplicated(data))

# 1.b - Outlier elimination 

numeric_cols <- c("math.score", "reading.score", "writing.score")

for (col in numeric_cols) {
  Q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
  Q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
  IQR_value <- Q3 - Q1
  
  cat("\nColonna:", col, "\nQ1:", Q1, "\nQ3:", Q3, "\nIQR:", IQR_value, "\n")
  cat("Pre-row:", nrow(data), "\n")
  
  data <- data[data[[col]] >= (Q1 - 1.5 * IQR_value) & 
                 data[[col]] <= (Q3 + 1.5 * IQR_value), ]
  
  cat("Post-row", nrow(data), "\n")
}

summary(data)

colnames(data)


## 2 - Data visualization

data%>%head()

# 2.a - Data overview

summary(data)
str(data)
lapply(data[, sapply(data, is.character)], unique)
table(data$gender)
table(data$race.ethnicity)
table(data$parental.level.of.education)
table(data$test.preparation.course)
table(data$lunch)

# 2.b - Data distribution overview

# Histogram - Math Score
ggplot(data, aes(x =math.score)) +
  geom_histogram(bins = 20, fill = "skyblue", color = "black") +
  ggtitle("Distribution of Math Scores") +
  xlab("Math Score") +
  ylab("Frequency")

# Histogram - Reading Score
ggplot(data, aes(x =reading.score)) +
  geom_histogram(bins = 20, fill = "lightgreen", color = "black") +
  ggtitle("Distribution of Reading Scores") +
  xlab("Reading Score") +
  ylab("Frequency")

# Histogram - per Writing Score
ggplot(data, aes(x =writing.score)) +
  geom_histogram(bins = 20, fill = "salmon", color = "black") +
  ggtitle("Distribution of Writing Scores") +
  xlab("Writing Score") +
  ylab("Frequency")

# Histogram - Ethnic Group Distribution diveded by Parental Level of Educaion
data %>%
  group_by(`race.ethnicity`, `parental.level.of.education`) %>%
  summarize(count = n(), .groups = "drop") %>%  
  ggplot(aes(x = `race.ethnicity`, y = count, fill = `parental.level.of.education`)) +
  geom_col(position = "dodge") +
  scale_fill_manual(values = c("#006400", "#008000", "#32CD32", "#66CDAA", "#00FA9A", "#7FFF00")) + 
  labs(title = "Ethnic Group Distribution",
       x = "Ethnicity",
       y = "Frequency",
       fill = "Parental Level of Education") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Histogram - Ethnic Group Distribution by Gender
ggplot(data, aes(x = gender, fill = factor(race.ethnicity))) +  
  geom_bar(position = "dodge") +
  scale_fill_manual(values = c("#006400", "#008000", "#32CD32", "#66CDAA", "#00FA9A"), 
                    name = "Ethnicity") +
  ggtitle("Ethnic Group Distribution by Gender") +  
  xlab("Gender") +  
  ylab("Frequency") +
  theme_minimal() + 
  theme(legend.title = element_text(size = 12), 
        legend.text = element_text(size = 10)) 

# Histogram - Total Score by Lunch Type
lunch_summary <- data %>% 
  group_by(lunch) %>%
  summarise(
    MathTotalScore = sum(math.score, na.rm = TRUE),
    ReadingTotalScore = sum(reading.score, na.rm = TRUE),
    WritingTotalScore = sum(writing.score, na.rm = TRUE)
  ) %>%
  mutate(TotalScore = MathTotalScore + ReadingTotalScore + WritingTotalScore)
print(lunch_summary)
ggplot(lunch_summary, aes(x = lunch, y = TotalScore, fill = lunch)) + 
  geom_bar(stat = "identity", width = 0.6) +
  labs(
    title = "Total Scores by Lunch Type",
    x = "Lunch Type",
    y = "Total Scores"
  ) +
  theme_minimal() + 
  theme(
    axis.text.x = element_text(vjust = 1, hjust = 0.5),
    legend.position = "none"
  ) +
  geom_text(aes(label = TotalScore), vjust = -0.5, size = 3)

# Number of student diveded per etnicity with grade >80
table(data$race.ethnicity)
race.ethnicity80 <- data %>% 
  group_by(race.ethnicity) %>%
  filter(math.score > 80, writing.score > 80, reading.score > 80) 
table(x1$race.ethnicity)
race.ethnicity80 %>% ggplot() + geom_bar(aes(x1$race.ethnicity,fill = x1$race.ethnicity))

#Reading - Writing - Maths score divided by gender
girl_data<-data%>%filter(gender=='female')
boy_data<-data%>%filter(gender=='male')
ggplot()+
  geom_point(girl_data,mapping=aes(`math.score`,`reading.score`,color='female'))+
  geom_point(boy_data,mapping=aes(`math.score`,`reading.score`,color='male'))+labs(title='Math and Reading Score')
ggplot()+
  geom_point(girl_data,mapping=aes(`math.score`,`writing.score`,color='female'))+
  geom_point(boy_data,mapping = aes(`math.score`,`writing.score`,color='male'))+labs(title='Math and Writing Score')
ggplot()+
  geom_point(girl_data,mapping=aes(`reading.score`,`writing.score`,color='female'))+
  geom_point(boy_data,mapping = aes(`reading.score`,`writing.score`,color='male'))+labs(title='Reading and Writing Score')

pairs.panels(data[, 6:8],
             method = "pearson",  
             hist.col = "skyblue", 
             density = TRUE,      
             ellipses = TRUE,      
             lm = TRUE            
)


## 3 - Data clusering 


# 3.a - Optimal number of cluster - Elbow method

data_scaled <- scale(data[, numeric_cols])
set.seed(123)
fviz_nbclust(data_scaled, kmeans, method = "wss") +
  geom_vline(xintercept = 4, linetype = 2) +
  labs(subtitle = "Elbow Method")
k <- 5 

set.seed(123)
gap_stat <- clusGap(data_scaled, FUN = kmeans, K.max = 5, B = 50)
fviz_gap_stat(gap_stat)

set.seed(123)
km_result <- kmeans(data_scaled, centers = k, nstart = 25)
print(kmeans_result$centers)
data$Cluster <- as.factor(km_result$cluster)
fviz_cluster(km_result, data = data_scaled, 
             geom = "point", ellipse.type = "norm",
             palette = "jco", ggtheme = theme_minimal())
cluster_summary <- data %>%
  group_by(Cluster) %>%
  summarise(
    Avg_Math = mean(math.score),
    Avg_Reading = mean(reading.score),
    Avg_Writing = mean(writing.score),
    Count = n()
  )
print(cluster_summary)
head(data)

#Math Score vs Reading Score
ggplot(data, aes(x = math.score, y = reading.score, color = Cluster)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_brewer(palette = "Set1") +
  labs(title = "K-Means Clustering: Math vs Reading Score",
       x = "Math Score", y = "Reading Score") +
  theme_minimal()

#Math Score vs Writing Score
ggplot(data, aes(x = math.score, y = writing.score, color = Cluster)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_brewer(palette = "Set1") +
  labs(title = "K-Means Clustering: Math vs Writing Score",
       x = "Math Score", y = "Writing Score") +
  theme_minimal()

#Reading Score vs Writing Score
ggplot(data, aes(x = reading.score, y = writing.score, color = Cluster)) +
  geom_point(size = 4, alpha = 0.8) +
  scale_color_brewer(palette = "Set1") +
  labs(title = "K-Means Clustering: Reading vs Writing Score",
       x = "Reading Score", y = "Writing Score") +
  theme_minimal()


fviz_silhouette(silhouette(kmeans_result$cluster, dist(scaled_data)))
table(data$Cluster, data$`test.preparation.course`)

ggplot(data, aes(x = Cluster, y = math.score, fill = Cluster)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Math Score Distribution by Cluster", x = "Cluster", y = "Math Score")

ggplot(data, aes(x = Cluster, y = reading.score, fill = Cluster)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Reading Score Distribution by Cluster", x = "Cluster", y = "Reading Score")

ggplot(data, aes(x = Cluster, y = writing.score, fill = Cluster)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Writing Score Distribution by Cluster", x = "Cluster", y = "Writing Score")

install.packages("fossil")
library(fossil)

#Comparision btw Ethnicity&KMeans
rand_index <- rand.index(as.integer(data$Cluster), as.integer(as.factor(data$race.ethnicity)))
print(paste("Rand Index:", round(rand_index, 3)))


## 4 - Central point


# 4.a - Mean computation

central_math_score <- mean(data$`math.score`, na.rm = TRUE)
central_reading_score <- mean(data$`reading.score`, na.rm = TRUE)
central_writing_score <- mean(data$`writing.score`, na.rm = TRUE)

cat("Central point - Math Score:", central_math_score, "\n")
cat("Central point - Reading Score:", central_reading_score, "\n")
cat("Central point - Writing Score:", central_writing_score, "\n")

# 4.a - Mean computation divided by gender
mean_scores <- data %>%
  group_by(gender) %>%
  summarise(
    MathMean = mean(math.score, na.rm = TRUE),
    WritingMean = mean(writing.score, na.rm = TRUE),
    ReadingMean = mean(reading.score, na.rm = TRUE)
  ) %>%
  pivot_longer(cols = c(MathMean, WritingMean, ReadingMean), 
               names_to = "subject", 
               values_to = "mean_score")
ggplot(mean_scores, aes(x = gender, y = mean_score, fill = subject)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = round(mean_score, 1)), 
            position = position_dodge(width = 0.9), 
            vjust = -0.5, size = 3) +
  labs(title = "Mean by Gender",
       x = "Gender",
       y = "Mean",
       fill = "Materia") +
  theme_minimal()

data %>%
  group_by(`gender`) %>%
  summarize(avg_score = round(mean(`math.score` + `reading.score` + `writing.score`) / 3, 1)) %>%
  ggplot(aes(x = `gender`, y = avg_score, fill = `gender`)) +
  geom_bar(stat = 'identity') +
  geom_text(aes(label = avg_score), vjust = -0.3, size = 4) +
  coord_flip() +  
  labs(title = 'Average Score of Each Gender', x = 'Gender', y = 'Average Score') +
  guides(fill = "none") + 
  theme_minimal()

# 4.b - Distance form central point

euclidean_distance <- function(math, reading, writing) {
  sqrt((math - central_math_score)^2 +
         (reading - central_reading_score)^2 +
         (writing - central_writing_score)^2)
}
data$DistanceFromCenter <- mapply(euclidean_distance,
                                  math = data$`math.score`,
                                  reading = data$`reading.score`,
                                  writing = data$`writing.score`)
head(data)

subset_data <- data[1:10, ]
central_point <- data.frame(
  math.score = central_math_score,
  reading.score = central_reading_score,
  writing.score = central_writing_score
)
ggplot(subset_data, aes(x = `math.score`, y = `reading.score`, color = as.factor(Cluster))) +
  geom_point(size = 4, alpha = 0.8) +  
  geom_point(data = central_point, aes(x = `math.score`, y = `reading.score`),
             color = "black", size = 6, shape = 4, stroke = 2) +
  geom_text(aes(label = round(DistanceFromCenter, 2)), vjust = -1, size = 3) +
  scale_color_brewer(palette = "Set2", name = "Cluster") + 
  labs(title = "Distance from Central Point",
       x = "Math Score", y = "Reading Score") +
  theme_minimal() +
  theme(legend.position = "right")
ggplot(subset_data, aes(x = `math.score`, y = `writing.score`, color = as.factor(Cluster))) +
  geom_point(size = 4, alpha = 0.8) +  
  geom_point(data = central_point, aes(x = `math.score`, y = `writing.score`),
             color = "black", size = 6, shape = 4, stroke = 2) +
  geom_text(aes(label = round(DistanceFromCenter, 2)), vjust = -1, size = 3) +
  scale_color_brewer(palette = "Set2", name = "Cluster") + 
  labs(title = "Distance from Central Point",
       x = "Math Score", y = "Writing Score") +
  theme_minimal() +
  theme(legend.position = "right")
ggplot(subset_data, aes(x = `writing.score`, y = `reading.score`, color = as.factor(Cluster))) +
  geom_point(size = 4, alpha = 0.8) +  
  geom_point(data = central_point, aes(x = `writing.score`, y = `reading.score`),
             color = "black", size = 6, shape = 4, stroke = 2) +
  geom_text(aes(label = round(DistanceFromCenter, 2)), vjust = -1, size = 3) +
  scale_color_brewer(palette = "Set2", name = "Cluster") + 
  labs(title = "Distance from Central Point",
       x = "Writing Score", y = "Reading Score") +
  theme_minimal() +
  theme(legend.position = "right")
  

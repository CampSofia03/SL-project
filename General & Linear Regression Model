#---
#  Title: General & Linear Regression Model
#  Author: Campregher Sofia
# Source: https://www.kaggle.com/datasets/spscientist/students-performance-in-exams/data

#---


###
#1 - Data Preparation 
###

file_path <- file.choose()
data <- read.csv(file_path)

# 1.a - Data cleaning

colSums(is.na(data))
data[!complete.cases(data), ]
sum(is.na(data))
sum(duplicated(data))

# 1.b - Outlier elimination 

numeric_cols <- c("math.score", "reading.score", "writing.score")

summary(data)

for (col in numeric_cols) {
  Q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
  Q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
  IQR_value <- Q3 - Q1
  
  cat("\nColumn:", col, "\nQ1:", Q1, "\nQ3:", Q3, "\nIQR:", IQR_value, "\n")
  cat("Pre-row:", nrow(data), "\n")
  
  data <- data[data[[col]] >= (Q1 - 1.5 * IQR_value) & 
                 data[[col]] <= (Q3 + 1.5 * IQR_value), ]
  
  cat("Post-row", nrow(data), "\n")
}

summary(data)


###
# 2 - Correlation
###


# 2.a - Correlation matrix and p-values

if (!requireNamespace("Hmisc", quietly = TRUE)) {install.packages("Hmisc")}
library(Hmisc)

res2 <- rcorr(as.matrix(data[, c("math.score", "writing.score", "reading.score")]))

flattenCorrMatrix <- function(cormat, pmat) {
  ut <- upper.tri(cormat)  
  data.frame(
    Variable1 = rownames(cormat)[row(cormat)[ut]],
    Variable2 = colnames(cormat)[col(cormat)[ut]],
    Correlation = round(cormat[ut], 3),
    P_value = format.pval(pmat[ut], digits = 6, eps = .Machine$double.eps)
  )
}

cor_table <- flattenCorrMatrix(res2$r, res2$P)

print(cor_table)

# 2.b - Correlation visualization

if (!requireNamespace("dplyr", quietly = TRUE)) {install.packages("dplyr")}
library(dplyr)

# New numeric dataset
data$Gender <- as.numeric(factor(data$gender))
data$Ethnicity <- as.numeric(factor(data$race.ethnicity)) # Corretto per evitare duplicazioni
data$ParentEd <- as.numeric(factor(data$parental.level.of.education, 
                                   levels = c('some high school', 'high school', 'some college', 
                                              "associate's degree", "bachelor's degree", "master's degree")))
data$Lunch <- as.numeric(factor(data$lunch, levels = c("standard", "free/reduced")))
data$TPrep <- as.numeric(factor(data$test.preparation.course, levels = c('none', 'completed')))

View(data)

df <- select_if(data, is.numeric)
View(df)

# Correlation Visualization - all varable
if (!requireNamespace("ggplot2", quietly = TRUE)) {install.packages("ggplot2")}
library(ggplot2)
if (!requireNamespace("ggcorrplot", quietly = TRUE)) {install.packages("ggcorrplot")}
library(ggcorrplot)

r <- cor(df, use = "complete.obs")
r <- round(r, 2)


ggcorrplot(r, hc.order = TRUE, colors = c("aquamarine", "white", "dodgerblue"),
           type = "lower", lab = TRUE)

# Correlation Visualization - all varable
if (!requireNamespace("corrplot", quietly = TRUE)) {install.packages("corrplot")}
library(corrplot)

num_data <- data[, c( "math.score", "reading.score", "writing.score")]
corr_<-cor(num_data)
corr_
corrplot(corr_, method="circle", type='upper', tl.cex=0.8, tl.col = 'black')

# 2.c - Bivariate relationships between academic scores

scatter.smooth(x=data$math.score, y=data$reading.score, main="Math ~ Reading", xlab = "Math", ylab = "Reading")
scatter.smooth(x=data$math.score, y=data$writing.score, main="Math ~ Writing", xlab = "Math", ylab = "Writing")
scatter.smooth(x=data$reading.score, y=data$math.score, main="Reading ~ Math", xlab = "Reading", ylab = "Math")
scatter.smooth(x=data$reading.score, y=data$writing.score, main="Reading ~ Writing", xlab = "Reading", ylab = "Writing")
scatter.smooth(x=data$writing.score, y=data$reading.score, main="Writing ~ Math", xlab = "Writing", ylab = "Reading")
scatter.smooth(x=data$writing.score, y=data$math.score, main="Writing ~ Math", xlab = "Writing", ylab = "Math")


# 2.d - Data Distributions

p1 <- ggplot(df, aes(x = math.score)) + 
  geom_histogram(binwidth = 5, fill = "lightblue", color = "black") + 
  geom_boxplot(aes(y = -5), width = 3, outlier.shape = NA) +
  labs(title = "Math Scores", x = "Math Score", y = "Frequency") +
  theme_minimal()

p2 <- ggplot(df, aes(x = reading.score)) + 
  geom_histogram(binwidth = 5, fill = "lightblue", color = "black") + 
  geom_boxplot(aes(y = -5), width = 3, outlier.shape = NA) +
  labs(title = "Reading Scores", x = "Reading Score", y = "Frequency") +
  theme_minimal()

p3 <- ggplot(df, aes(x = writing.score)) + 
  geom_histogram(binwidth = 5, fill = "lightblue", color = "black") + 
  geom_boxplot(aes(y = -5), width = 3, outlier.shape = NA) +
  labs(title = "Writing Scores", x = "Writing Score", y = "Frequency") +
  theme_minimal()

gridExtra::grid.arrange(p1, p2, p3, ncol = 3)

# 2.e - Skewness

if (!requireNamespace("moments", quietly = TRUE)) {install.packages("moments")}
library(moments)

skew_table <- data.frame(
  Score_Type = c("Math Score", "Reading Score", "Writing Score"),
  Skewness = c(
    skewness(df$math.score, na.rm = TRUE),
    skewness(df$reading.score, na.rm = TRUE),
    skewness(df$writing.score, na.rm = TRUE)
  )
)

print(skew_table)

# 2.f Variable dipendences

if (!requireNamespace("rpart", quietly = TRUE)) {install.packages("rpart")}
library(rpart)

c_math <- subset(df, select = -c(writing.score,reading.score)) 
c_writing <- subset(df, select = -c(reading.score,math.score)) 
c_reading <- subset(df, select = -c(writing.score,math.score)) 

fit1 <- rpart(math.score ~ ., data = c_math)
fit2 <- rpart(writing.score ~ ., data = c_writing)
fit3 <- rpart(reading.score ~ ., data = c_reading)

options(repr.plot.width = 16, repr.plot.height = 7)
par(mfrow = c(1,3))

vi1 <- sort(fit1$variable.importance, decreasing = TRUE)[1:2]
vi2 <- sort(fit2$variable.importance, decreasing = TRUE)[1:2]
vi3 <- sort(fit3$variable.importance, decreasing = TRUE)[1:2] 

barplot(vi1, horiz = FALSE, las = 1, col = "#1D91C0",
        main = "Math Score Prediction",
        names.arg = names(vi1),
        cex.names = 1,
        cex.main = 0.9,
        yaxt = "n", ylab = "")

barplot(vi2, horiz = FALSE, las = 1, col = "#1D91C0",
        main = "Writing Score Prediction",
        cex.names = 1,
        cex.main = 0.9,
        yaxt = "n", ylab = "")

barplot(vi3, horiz = FALSE, las = 1, col = "#1D91C0",
        main = "Reading Score Prediction",
        cex.names = 1,
        cex.main = 0.9,
        yaxt = "n", ylab = "")
par(mfrow = c(1,1))


# 2.g Multicollinearity

if (!requireNamespace("caret", quietly = TRUE)) {install.packages("caret")}
library(caret)

m1 <- subset(df, select = -c(math.score))
m1[] <- lapply(m1, function(x) if(is.factor(x) | is.character(x)) as.numeric(as.factor(x)) else x)
mc <- cor(m1)
highlyCorrelated = findCorrelation(mc, cutoff=0.7)
highlyCorCol = colnames(m1)[highlyCorrelated]
highlyCorCol

m2 <- subset(df, select = -c(reading.score))
m2[] <- lapply(m2, function(x) if(is.factor(x) | is.character(x)) as.numeric(as.factor(x)) else x)
mc <- cor(m2)
highlyCorrelated = findCorrelation(mc, cutoff=0.7)
highlyCorCol = colnames(m2)[highlyCorrelated]
highlyCorCol

m3 <- subset(df, select = -c(writing.score))
m3[] <- lapply(m3, function(x) if(is.factor(x) | is.character(x)) as.numeric(as.factor(x)) else x)
mc <- cor(m3)
highlyCorrelated = findCorrelation(mc, cutoff=0.7)
highlyCorCol = colnames(m3)[highlyCorrelated]
highlyCorCol


###
# 3 - Linear Regression
###


# 3.a - Simple Linear Regression  

reg1s <- lm(math.score ~ reading.score, data=data)
reg2s <- lm(reading.score ~ math.score, data=data)
reg3s <- lm(writing.score ~ math.score, data=data)
var_names <- c("(Intercept)" = "Intercept",
               "writing.score" = "WritingS",
               "reading.score" = "ReadingS",
               "math.score" = "MathS")
print(reg1s)
print(reg2s)
print(reg3s)

generate_equation <- function(model, target_variable) {
  coef_rounded <- round(coef(model), 2)
  equation <- paste0(target_variable, " = ", coef_rounded[1])
  
  for (i in 2:length(coef_rounded)) {
    sign <- ifelse(coef_rounded[i] >= 0, " + ", " - ")
    var_name <- var_names[names(coef_rounded)[i]]
    equation <- paste0(equation, sign, abs(coef_rounded[i]), "*", var_name)
  }
  
  return(equation)
}

eq_math <- generate_equation(reg1s, "Math Score")
eq_reading <- generate_equation(reg2s, "Reading Score")
eq_writing <- generate_equation(reg3s, "Writing Score")

cat("Math Score Equation:\n", eq_math, "\n\n")
cat("Reading Score Equation:\n", eq_reading, "\n\n")
cat("Writing Score Equation:\n", eq_writing, "\n\n")

summary(reg1s)
summary(reg2s)
summary(reg3s)

# 3.b - Multiple Linear Regression

reg1m <- lm(math.score ~ gender + race.ethnicity + reading.score + 
              parental.level.of.education + lunch + test.preparation.course, data=data) #noWriting

reg2m <- lm(reading.score ~ gender + race.ethnicity + parental.level.of.education + 
              lunch + test.preparation.course + math.score, data=data) #noWriting

reg3m <- lm(writing.score ~ gender + race.ethnicity + parental.level.of.education + 
              lunch + test.preparation.course + math.score, data=data) #noReading

var_names <- c("(Intercept)" = "Intercept",
               "gendermale" = "Male",
               "genderfemale" = "Female",
               "race.ethnicitygroup A" = "GroupA",
               "race.ethnicitygroup B" = "GroupB",
               "race.ethnicitygroup C" = "GroupC",
               "race.ethnicitygroup D" = "GroupD",
               "race.ethnicitygroup E" = "GroupE",
               "parental.level.of.educationbachelor's degree" = "Bachelor",
               "parental.level.of.educationhigh school" = "HighS",
               "parental.level.of.educationmaster's degree" = "Master",
               "parental.level.of.educationsome college" = "SCollege",
               "parental.level.of.educationsome high school" = "SHighS",
               "parental.level.of.educationassociate's degree" = "Associate",
               "lunchstandard" = "SLunch",
               "lunchfree/reduced" = "RLunch",
               "test.preparation.coursenone" = "NoTPrep",
               "test.preparation.coursecompleted" = "TPrep",
               "writing.score" = "WritingS",
               "reading.score" = "ReadingS",
               "math.score" = "MathS")

generate_equation <- function(model, target_variable) {
  coef_rounded <- round(coef(model), 2)
  equation <- paste0(target_variable, " = ", coef_rounded[1])
  
  for (i in 2:length(coef_rounded)) {
    sign <- ifelse(coef_rounded[i] >= 0, " + ", " - ")
    var_name <- var_names[names(coef_rounded)[i]]
    equation <- paste0(equation, sign, abs(coef_rounded[i]), "*", var_name)
  }
  
  return(equation)
}

eq_math <- generate_equation(reg1m, "Math Score")
eq_reading <- generate_equation(reg2m, "Reading Score")
eq_writing <- generate_equation(reg3m, "Writing Score")

cat("Math Score Equation:\n", eq_math, "\n\n")
cat("Reading Score Equation:\n", eq_reading, "\n\n")
cat("Writing Score Equation:\n", eq_writing, "\n\n")

summary(reg1m)
summary(reg2m)
summary(reg3m)


# 3.e Variance Inflation Factor

if (!requireNamespace("car", quietly = TRUE)) {install.packages("car")}
library(car)

cat("\n--- VIF - Math Score Model ---\n")
print(vif(reg1m))

cat("\n--- VIF - Reading Score Model ---\n")
print(vif(reg2m))

cat("\n--- VIF - Writing Score Model ---\n")
print(vif(reg3m))

# 4.f QQPlot - Specific

if (!requireNamespace("ggplot2", quietly = TRUE)) {install.packages("ggplot2")}
library(ggplot2)

qqplot_math <- ggplot(df, aes(sample = math.score)) +
  geom_qq() +
  geom_qq_line() +
  ggtitle("Normal Q-Q Plot of Math Scores") +
  theme_minimal()

qqplot_reading <- ggplot(df, aes(sample = reading.score)) +
  geom_qq() +
  geom_qq_line() +
  ggtitle("Normal Q-Q Plot of Reading Scores") +
  theme_minimal()

qqplot_writing <- ggplot(df, aes(sample = writing.score)) +
  geom_qq() +
  geom_qq_line() +
  ggtitle("Normal Q-Q Plot of Writing Scores") +
  theme_minimal()

print(qqplot_math)
print(qqplot_reading)
print(qqplot_writing)

# 4.g - Residuals vs Fitted Plot - Specific

plot_residuals <- function(model, model_name) {
  residuals_model <- residuals(model)  # Residui
  fitted_values_model <- fitted(model) # Valori predetti
  
  df_residuals <- data.frame(Fitted = fitted_values_model, Residuals = residuals_model)
  
  residual_plot <- ggplot(df_residuals, aes(x = Fitted, y = Residuals)) +
    geom_point(alpha = 0.6) +
    geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
    ggtitle(paste("Residuals vs Fitted Values -", model_name)) +
    xlab("Fitted Values") +
    ylab("Residuals") +
    theme_minimal()
  
  print(residual_plot)
}

plot_residuals(reg1m, "Math Score Model")
plot_residuals(reg2m, "Reading Score Model")
plot_residuals(reg3m, "Writing Score Model")

# 4.h - QQPlot-Residuals vs Fitted Plot-Scale Location-Residuals vs Leverage

options(repr.plot.width=20, repr.plot.height=7)
par(mfrow = c(2,2))
plot(reg1m, main = "Diagnostic Plots - Model reg1m")
plot(reg2m, main = "Diagnostic Plots - Model reg2m")
plot(reg2m, main = "Diagnostic Plots - Model reg3m")

# 4.i Model assumption

if (!requireNamespace("gvlma", quietly = TRUE)) {install.packages("gvlma")}
library(gvlma)

gvmodel_1 <- gvlma(reg1m)
summary(gvmodel_1)

summary(reg1m)


# 4.l Interacts of Writing&Reading

reg1mw <- lm(math.score ~ writing.score*gender + writing.score*race.ethnicity + writing.score*reading.score + 
               writing.score*parental.level.of.education + writing.score*lunch + writing.score*test.preparation.course, data=data) #noWriting

reg2mw <- lm(reading.score ~ writing.score*gender + writing.score*race.ethnicity + writing.score*parental.level.of.education + 
               writing.score*lunch + writing.score*test.preparation.course + writing.score*math.score, data=data) #noWriting

reg3mr <- lm(writing.score ~ reading.score*gender + reading.score*race.ethnicity + reading.score*parental.level.of.education + 
               reading.score*lunch + reading.score*test.preparation.course + math.score, data=data)

summary(reg1mw)
summary(reg2mw)
summary(reg3mr)

# 4. m - Variance Inflation Factor

cat("\n--- VIF - Math Score Model* Writing ---\n")
print(vif(reg1mw))

cat("\n--- VIF - Reading Score Model* Writing ---\n")
print(vif(reg2mw))

cat("\n--- VIF - Writing Score Model* Writing ---\n")
print(vif(reg3mr))

options(repr.plot.width=20, repr.plot.height=7)
par(mfrow = c(2,2))
plot(reg1mw, main = "Diagnostic Plots - Model reg1mw")
plot(reg2mw, main = "Diagnostic Plots - Model reg2mw")
plot(reg3mr, main = "Diagnostic Plots - Model reg3mr")

#Model Comparison (?)
anova(reg1m, reg1mw)
AIC(reg1m, reg1mw)
BIC(reg1m, reg1mw)

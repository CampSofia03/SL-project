## 1 - Data Preparation 


file_path <- file.choose()
data <- read.csv(file_path)

# 1.a - Data cleaning

sum(is.na(data))
colSums(is.na(data))
data[!complete.cases(data), ]
sum(duplicated(data))

####### 1.b - Outlier elimination 

numeric_cols <- c("math.score", "reading.score", "writing.score")

for (col in numeric_cols) {
  Q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
  Q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
  IQR_value <- Q3 - Q1
  
  cat("\nColonna:", col, "\nQ1:", Q1, "\nQ3:", Q3, "\nIQR:", IQR_value, "\n")
  cat("Pre-row:", nrow(data), "\n")
  
  data <- data[data[[col]] >= (Q1 - 1.5 * IQR_value) & 
                 data[[col]] <= (Q3 + 1.5 * IQR_value), ]
  
  cat("Post-row", nrow(data), "\n")
}

summary(data)

colnames(data)


## 2 - Correlation 


# 2.a - Correlation matrix and p-values
install.packages("Hmisc")
library(Hmisc)

res2 <- rcorr(as.matrix(data[, c("math.score", "writing.score", "reading.score")]))

flattenCorrMatrix <- function(cormat, pmat) {
  ut <- upper.tri(cormat)  
  data.frame(
    Variable1 = rownames(cormat)[row(cormat)[ut]],
    Variable2 = colnames(cormat)[col(cormat)[ut]],
    Correlation = round(cormat[ut], 3),
    P_value = round(pmat[ut], 4)
  )
}

cor_table <- flattenCorrMatrix(res2$r, res2$P)

print(cor_table)

# 2.b Correlation visualization
install.packages("dplyr")
library(dplyr)

data$gender1 <- as.numeric(factor(data$gender))
data$race.ethnicity1 <- as.numeric(factor(data$race.ethnicity)) # Corretto per evitare duplicazioni
data$parent.education1 <- as.numeric(factor(data$parental.level.of.education, 
                                            levels = c('some high school', 'high school', 'some college', 
                                                       "associate's degree", "bachelor's degree", "master's degree")))
data$lunch1 <- as.numeric(factor(data$lunch, levels = c("standard", "free/reduced")))
data$test.preparation.course1 <- as.numeric(factor(data$test.preparation.course, levels = c('none', 'completed')))

View(data)

df <- select_if(data, is.numeric)

r <- cor(df, use = "complete.obs")
r <- round(r, 2)  # Arrotonda i valori a due decimali

install.packages("ggplot2")
library(ggplot2)

ggcorrplot(r, hc.order = TRUE, type = "lower", lab = TRUE)


#Data Distributions - normally distributed? 

p1 <- ggplot(df, aes(x = math.score)) + 
  geom_histogram(binwidth = 5, fill = "lightblue", color = "black") + 
  geom_boxplot(aes(y = -5), width = 3, outlier.shape = NA) +
  labs(title = "Math Scores", x = "Math Score", y = "Frequency") +
  theme_minimal()

p2 <- ggplot(df, aes(x = reading.score)) + 
  geom_histogram(binwidth = 5, fill = "lightblue", color = "black") + 
  geom_boxplot(aes(y = -5), width = 3, outlier.shape = NA) +
  labs(title = "Reading Scores", x = "Reading Score", y = "Frequency") +
  theme_minimal()

p3 <- ggplot(df, aes(x = writing.score)) + 
  geom_histogram(binwidth = 5, fill = "lightblue", color = "black") + 
  geom_boxplot(aes(y = -5), width = 3, outlier.shape = NA) +
  labs(title = "Writing Scores", x = "Writing Score", y = "Frequency") +
  theme_minimal()

gridExtra::grid.arrange(p1, p2, p3, ncol = 3)

#Skewness
install.packages("moments")
library(moments)
skew_table <- data.frame(
  Score_Type = c("Math Score", "Reading Score", "Writing Score"),
  Skewness = c(
    skewness(df$math.score, na.rm = TRUE),
    skewness(df$reading.score, na.rm = TRUE),
    skewness(df$writing.score, na.rm = TRUE)
  )
)

print(skew_table)

#Variable dipendences
c_ <- subset(c, select = -Cluster)

c_math <- subset(c_, select = -c(writing.score,reading.score)) 
c_writing <- subset(c_, select = -c(reading.score,math.score)) 
c_reading <- subset(c_, select = -c(writing.score,math.score)) 

library(rpart)

fit1 <- rpart(math.score ~ ., data = c_math)
fit2 <- rpart(writing.score ~ ., data = c_writing)
fit3 <- rpart(reading.score ~ ., data = c_reading)

options(repr.plot.width = 16, repr.plot.height = 7)
par(mfrow = c(1,3))

vi1 <- sort(fit1$variable.importance, decreasing = TRUE)[1:2]
vi2 <- sort(fit2$variable.importance, decreasing = TRUE)[1:2]
vi3 <- sort(fit3$variable.importance, decreasing = TRUE)[1:2] 

barplot(vi1, horiz = FALSE, las = 1, col = "#1D91C0",
        main = "Math Score Prediction",
        names.arg = names(vi1),
        cex.names = 0.5,
        cex.main = 0.9,
        yaxt = "n", ylab = "")

barplot(vi2, horiz = FALSE, las = 1, col = "#1D91C0",
        main = "Writing Score Prediction",
        cex.names = 0.5,
        cex.main = 0.9,
        yaxt = "n", ylab = "")

barplot(vi3, horiz = FALSE, las = 1, col = "#1D91C0",
        main = "Reading Score Prediction",
        cex.names = 0.5,
        cex.main = 0.9,
        yaxt = "n", ylab = "")
par(mfrow = c(1,1))


